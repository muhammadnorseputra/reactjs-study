{"version":3,"sources":["serviceWorker.js","component/Post/Post.jsx","container/BlogPost/BlogPost.jsx","container/Home/Home.jsx","index.js"],"names":["Boolean","window","location","hostname","match","document","lazyLoadInstance","LazyLoad","elements_selector","Post","AOS","init","update","className","data-aos","data-src","alt","this","props","title","body","Button","primary","Component","BlogPost","state","posts","axios","get","then","response","setState","data","map","post","key","id","Home","Container","Header","as","dividing","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4GCZDC,SAASC,mBACZD,SAASC,iBAAmB,IAAIC,IAAS,CACvCC,kBAAmB,W,IAuCRC,E,kLAlCXC,IAAIC,OACJN,SAASC,iBAAiBM,W,2CAI1BP,SAASC,iBAAiBM,W,+BAG1B,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,YAAYC,WAAS,WAClC,yBAAKD,UAAU,uCACb,yBACEE,WAAS,wIACTC,IAAI,YACJH,UAAU,UAGd,yBAAKA,UAAU,2CACb,wBAAIA,UAAU,sCACXI,KAAKC,MAAMC,OAEd,uBAAGN,UAAU,0CACVI,KAAKC,MAAME,KACZ,kBAACC,EAAA,EAAD,CAAQC,SAAO,GAAf,cAIN,yBAAKT,UAAU,kB,GA9BJU,a,kBCPEC,E,kDACnB,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,MAAO,IAHQ,E,gEAOE,IAAD,OAQlBC,IAAMC,IAAI,6CACPC,MAAK,SAACC,GACL,EAAKC,SAAS,CACZL,MAAOI,EAASE,Y,+BAMtB,OACE,kBAAC,WAAD,KAEIf,KAAKQ,MAAMC,MAAMO,KAAI,SAAAC,GACnB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAKE,GAAIjB,MAAOe,EAAKf,MAAOC,KAAMc,EAAKd,e,GA7B/BG,aCGjBc,E,uKAEjB,OACE,kBAAC,WAAD,KACE,kBAACC,EAAA,EAAD,KAmBE,kBAACC,EAAA,EAAD,CAAQ1B,UAAU,OAAO2B,GAAG,KAAKC,UAAQ,GAAzC,sBAGA,kBAAC,EAAD,Y,GA1BwBlB,aCIlCmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASwC,eAAe,eJoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f77fb6e6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component, Fragment} from 'react';\r\nimport AOS from \"aos\";\r\nimport LazyLoad from \"vanilla-lazyload\";\r\nimport \"aos/dist/aos.css\";\r\nimport { Button } from \"semantic-ui-react\";\r\n// Only initialize it one time for the entire application\r\nif (!document.lazyLoadInstance) {\r\n  document.lazyLoadInstance = new LazyLoad({\r\n    elements_selector: \".lazy\",\r\n  });\r\n}\r\nclass Post extends Component {\r\n  componentDidMount() {\r\n    AOS.init();\r\n    document.lazyLoadInstance.update();\r\n  }\r\n  // Update lazyLoad after rerendering of every image\r\n  componentDidUpdate() {\r\n    document.lazyLoadInstance.update();\r\n  }\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"flex my-3\" data-aos=\"fade-up\">\r\n          <div className=\"w-1/6 ml-auto bg-gray-500 shadow-lg\">\r\n            <img\r\n              data-src=\"https://images.unsplash.com/photo-1577911945168-b4a2d919fc73?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=750&q=80\"\r\n              alt=\"img-thumb\"\r\n              className=\"lazy\"\r\n            />\r\n          </div>\r\n          <div className=\"w-1/2 mr-auto bg-gray-400 p-3 shadow-lg\">\r\n            <h1 className=\"text-purple-800 text-2xl font-bold\">\r\n              {this.props.title}\r\n            </h1>\r\n            <p className=\"text-gray-600 mt-4 leading-5 font-sans\">\r\n              {this.props.body}\r\n              <Button primary>Primary</Button>\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"clearfix\"></div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component, Fragment } from 'react'\r\nimport Post from '../../component/Post/Post'\r\nimport axios from 'axios'\r\n\r\nexport default class BlogPost extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      posts: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // fetch(\"http://jsonplaceholder.typicode.com/posts\")\r\n    //   .then((response) => response.json())\r\n    //   .then((json) => {\r\n    //     this.setState({\r\n    //       posts: json\r\n    //     })\r\n    //   });\r\n    axios.get(\"http://jsonplaceholder.typicode.com/posts\")\r\n      .then((response) => {\r\n        this.setState({\r\n          posts: response.data\r\n        })\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        {\r\n          this.state.posts.map(post => {\r\n            return <Post key={post.id} title={post.title} body={post.body} />;\r\n          })\r\n        }\r\n        \r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { Container, Header } from \"semantic-ui-react\"; \r\n// import Youtube from '../../component/Youtube/Youtube'\r\n// import Product from '../Product/Product'\r\n// import LifeCycle from \"../LifeCycle/LifeCycle\"\r\nimport BlogPost from \"../BlogPost/BlogPost\"\r\n\r\nexport default class Home extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Container>\r\n          {/* <h1 className=\"d-block p-3 h-12 bg-black text-white\">\r\n          Yotube Component\r\n        </h1>\r\n        <div className=\"flex\">\r\n          <Youtube title=\"Video 01\" body=\"Toturial 01\" />\r\n          <Youtube title=\"Video 02\" body=\"Toturial 02\" />\r\n          <Youtube title=\"Video 03\" body=\"Toturial 03\" />\r\n          <Youtube title=\"Video 04\" body=\"Toturial 04\" />\r\n          <Youtube />\r\n        </div> */}\r\n          {/* <h1 className=\"d-block p-3 h-12 bg-black text-white\">\r\n            Product Component\r\n          </h1>\r\n          <Product /> */}\r\n          {/* <h1 className=\"d-block p-3 h-12 bg-black text-white\">\r\n            LifeCycle Component\r\n          </h1>\r\n          <LifeCycle /> */}\r\n          <Header className=\"mt-5\" as=\"h1\" dividing>\r\n            BlogPost Component\r\n          </Header>\r\n          <BlogPost />\r\n        </Container>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./styles/main.css\";\n// import App from './App';\n// import HelloComponent from './component/HelloComponent';\n// import StateFullComponent from './container/StateFullComponent';\n// import Youtube from './component/Youtube/Youtube';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './container/Home/Home';\n\nReactDOM.render(  \n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('react-root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}